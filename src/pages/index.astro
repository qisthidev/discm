---
import personalities from "../data/personalities.v2.json";
import BaseLayout from "../layouts/BaseLayout.astro";
const groups = Array.from(new Set(personalities.map((p) => p.groupNo))).sort(
  (a, b) => a - b
);
function getGroupTerms(groupNo) {
  return personalities.filter((p) => p.groupNo === groupNo);
}
---

<BaseLayout title="DiSC Personality Test">
  <section class="space-y-6">
    <div class="prose max-w-none">
      <h2>DiSC Personality Test</h2>
      <p>
        The purpose of the DiSC Personality Test is to help you understand yourself and others. The Profile provides a framework for looking at
        human behaviour while increasing your knowledge of your unique behavioural pattern. The goal of this practical approach is to help you create an
        environment that will ensure your success. At the same time, you will gain an appreciation for the different motivational environments required by
        other behavioural styles. The three interpretation stages, which progress from general to specific, will help you master the DiSC Dimensions of
        Behaviour approach for understanding people.
      </p>
      <div class="relative rounded-lg bg-slate-800 text-white p-4">
        <button type="button" class="absolute right-3 top-2 inline-flex h-6 w-6 items-center justify-center rounded hover:bg-white/10" onclick="this.parentElement.style.display='none'">Ã—</button>
        <h3 class="text-lg font-semibold">Instruction</h3>
        <p>Choose one <b>MOST</b> and one <b>LEAST</b> in each of the 28 groups of words.</p>
      </div>
    </div>

    <form class="space-y-8">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {
          groups.slice(0, 4).map((g) => (
            <div class="bg-white shadow-sm rounded-lg overflow-hidden ring-1 ring-slate-200">
              <table class="w-full border-collapse text-sm">
                <thead>
                  <tr class="bg-slate-800 text-white">
                    <th class="px-2 py-2 text-left">No</th>
                    <th class="px-2 py-2 text-left">Term</th>
                    <th class="px-2 py-2 text-left">Most</th>
                    <th class="px-2 py-2 text-left">Least</th>
                  </tr>
                </thead>
                <tbody>
                  {getGroupTerms(g).map((t, idx) => (
                    <tr class={g % 2 === 0 ? "bg-slate-50" : ""}>
                      {idx === 0 && <th rowspan="4" class="px-2 py-2 align-top">{g}</th>}
                      <td class="px-2 py-2 align-top">{t.term}</td>
                      <td class="px-2 py-2">
                        <input
                          type="radio"
                          class="h-4 w-4"
                          id={`m_${g}_${idx}`}
                          name={`m[${g}]`}
                          value={t.mostMark}
                          required
                        />
                      </td>
                      <td class="px-2 py-2">
                        <input
                          type="radio"
                          class="h-4 w-4"
                          id={`l_${g}_${idx}`}
                          name={`l[${g}]`}
                          value={t.leastMark}
                          required
                        />
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ))
        }
      </div>

      {
        Array.from({ length: 6 }).map((_, sectionIdx) => (
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {groups.slice(sectionIdx * 4 + 4, sectionIdx * 4 + 8).map((g) => (
              <div class="bg-white shadow-sm rounded-lg overflow-hidden ring-1 ring-slate-200">
                <table class="w-full border-collapse text-sm">
                  <thead>
                    <tr class="bg-slate-800 text-white">
                      <th class="px-2 py-2 text-left">No</th>
                      <th class="px-2 py-2 text-left">Term</th>
                      <th class="px-2 py-2 text-left">Most</th>
                      <th class="px-2 py-2 text-left">Least</th>
                    </tr>
                  </thead>
                  <tbody>
                    {getGroupTerms(g).map((t, idx) => (
                      <tr class={g % 2 === 0 ? "bg-slate-50" : ""}>
                        {idx === 0 && <th rowspan="4" class="px-2 py-2 align-top">{g}</th>}
                        <td class="px-2 py-2 align-top">{t.term}</td>
                        <td class="px-2 py-2">
                          <input
                            type="radio"
                            class="h-4 w-4"
                            id={`m_${g}_${idx}`}
                            name={`m[${g}]`}
                            value={t.mostMark}
                            required
                          />
                        </td>
                        <td class="px-2 py-2">
                          <input
                            type="radio"
                            class="h-4 w-4"
                            id={`l_${g}_${idx}`}
                            name={`l[${g}]`}
                            value={t.leastMark}
                            required
                          />
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ))}
          </div>
        ))
      }

      <div class="flex justify-end">
        <input
          type="submit"
          value="Process"
          class="inline-flex items-center gap-2 rounded-lg bg-blue-600 px-4 py-2 text-white shadow hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
      </div>
    </form>
  </section>

  <script type="module">
    const storageKey = "disc:v1:progress";
    function saveProgress() {
      const form = document.querySelector("form");
      const data = new FormData(form);
      const state = { m: {}, l: {} };
      for (const [key, value] of data.entries()) {
        if (key.startsWith("m[")) state.m[key.slice(2, -1)] = value;
        if (key.startsWith("l[")) state.l[key.slice(2, -1)] = value;
      }
      localStorage.setItem(storageKey, JSON.stringify(state));
    }
    function restoreProgress() {
      const raw = localStorage.getItem(storageKey);
      if (!raw) return;
      try {
        const state = JSON.parse(raw);
        for (const idx in state.m) {
          const v = state.m[idx];
          const input = document.querySelector(`input[name="m[${idx}]"][value="${v}"]`);
          if (input) input.checked = true;
        }
        for (const idx in state.l) {
          const v = state.l[idx];
          const input = document.querySelector(`input[name="l[${idx}]"][value="${v}"]`);
          if (input) input.checked = true;
        }
      } catch {}
    }
    addEventListener("change", (e) => {
      if (e.target instanceof HTMLInputElement) saveProgress();
    });
    addEventListener("DOMContentLoaded", restoreProgress);
    addEventListener("submit", (e) => {
      const form = e.target;
      if (!(form instanceof HTMLFormElement)) return;
      e.preventDefault();
      const data = new FormData(form);
      const params = new URLSearchParams();
      for (const [key, value] of data.entries()) params.append(key, String(value));
      const url = "/result?" + params.toString();
      location.href = url;
    });
  </script>
</BaseLayout>
